package <%= @model.package %>.dao

import com.cursor.mappers.<%= @model.name %>Mapper
import com.cursor.models.<%= @model.name %>
import org.skife.jdbi.v2.sqlobject.Bind
import org.skife.jdbi.v2.sqlobject.BindBean
import org.skife.jdbi.v2.sqlobject.GetGeneratedKeys
import org.skife.jdbi.v2.sqlobject.SqlQuery
import org.skife.jdbi.v2.sqlobject.SqlUpdate
import org.skife.jdbi.v2.sqlobject.customizers.RegisterMapper

@RegisterMapper(<%= @model.name %>Mapper::class)
interface <%= @model.name %>DAO {

    companion object {
        const val FIELD_NAMES: String = "<%= @model.fields.map(&:name).join(', ') %>"
		const val FIELD_VALUES: String = "<%= @model.fields.map{|x| ":#{x.name}" }.join(', ') %>"
		const val ALL_FIELDS: String = "id, $FIELD_NAMES"
    }
  
    @SqlUpdate("INSERT INTO <%= @model.db_table %>($FIELD_NAMES) VALUES ($FIELD_VALUES)")
    @GetGeneratedKeys
    fun insert(@BindBean <%= @model.name.downcase %>: <%= @model.name %>): Long

    @SqlQuery("SELECT $ALL_FIELDS FROM <%= @model.name.downcase %> WHERE id = :id")
    fun find(@Bind("id") id: Long): <%= @model.name %>?
}
